{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3004,"databundleVersionId":861823,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-10T13:26:12.672369Z","iopub.execute_input":"2025-08-10T13:26:12.672633Z","iopub.status.idle":"2025-08-10T13:26:12.987658Z","shell.execute_reply.started":"2025-08-10T13:26:12.672613Z","shell.execute_reply":"2025-08-10T13:26:12.986714Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-10T13:27:37.167246Z","iopub.execute_input":"2025-08-10T13:27:37.168020Z","iopub.status.idle":"2025-08-10T13:27:40.671402Z","shell.execute_reply.started":"2025-08-10T13:27:37.167990Z","shell.execute_reply":"2025-08-10T13:27:40.670648Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-10T13:28:00.889408Z","iopub.execute_input":"2025-08-10T13:28:00.889928Z","iopub.status.idle":"2025-08-10T13:28:00.918758Z","shell.execute_reply.started":"2025-08-10T13:28:00.889897Z","shell.execute_reply":"2025-08-10T13:28:00.918056Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data = np.array(data)\nm, n = data.shape\nnp.random.shuffle(data)\n\ndata_dev = data[0:1000].T\nY_dev = data_dev[0]\nX_dev = data_dev[1:n]\n\ndata_train = data[1000:m].T\nY_train = data_train[0]\nX_train = data_train[1:n]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-10T14:00:12.523714Z","iopub.execute_input":"2025-08-10T14:00:12.524449Z","iopub.status.idle":"2025-08-10T14:00:13.148669Z","shell.execute_reply.started":"2025-08-10T14:00:12.524409Z","shell.execute_reply":"2025-08-10T14:00:13.147844Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def init_params():\n    w1 = np.random.rand(10, 784)\n    b1 = np.random.rand(10, 1)\n    w2 = np.random.rand(10, 10)\n    b2 = np.random.rand(10, 1)\n\n    return w1, b1, w2, b2\n\ndef ReLU(z):\n    return np.maximum(0, z)\n\ndef softmax(z):\n    exp_z = np.exp(z - np.max(z, axis=0, keepdims=True))\n    return exp_z / np.sum(exp_z, axis=0, keepdims=True)\n    \ndef forward_prop(w1, b1, w2, b2, X):\n    z1 = w1.dot(X) + b1\n    A1 = ReLU(z1)\n    z2 = w2.dot(A1) + b2\n    A2 = softmax(z2)\n    return z1, A1, z2, A2\n\ndef one_hot(Y):\n    one_hot_Y = np.zeros((Y.size, Y.max() + 1))\n    one_hot_Y[np.arange(Y.size), Y] = 1\n    one_hot_Y = one_hot_Y.T\n    return one_hot_Y\n\ndef deriv_relu(z):\n    return z > 0\n    \ndef back_prop(z1, A1, z2, A2, w2, X, Y):\n    m = Y.size\n    one_hot_Y = one_hot(Y)\n    dZ2 = A2 - one_hot_Y\n    dW2 = 1 / m * dZ2.dot(A1.T)\n    db2 = 1/m * np.sum(dZ2, axis=1, keepdims=True)\n\n    dZ1 = w2.T.dot(dZ2) * deriv_relu(z1)\n    dW1 = 1 / m * dZ1.dot(X.T)\n    db1 = 1/m * np.sum(dZ1, axis=1, keepdims=True)\n    return dW1, db1, dW2, db2\n\ndef update_params(w1, b1, w2, b2, dW1, db1, dW2, db2, alpha):\n    w1 = w1 - alpha * dW1\n    b1 = b1 - alpha * db1\n    w2 = w2 - alpha * dW2\n    b2 = b2 - alpha * db2\n    return w1, b1, w2, b2","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-10T14:56:58.902152Z","iopub.execute_input":"2025-08-10T14:56:58.902790Z","iopub.status.idle":"2025-08-10T14:56:58.912602Z","shell.execute_reply.started":"2025-08-10T14:56:58.902763Z","shell.execute_reply":"2025-08-10T14:56:58.911601Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def get_predictions(A2):\n    return np.argmax(A2, 0)\n\ndef get_accuracy(predictions, Y):\n    print(predictions, Y)\n    return np.sum(predictions == Y) / Y.size\n\ndef gradient_descent(X, Y, iterations, alpha):\n    w1, b1, w2, b2 = init_params()\n    for i in range(iterations):\n        z1, A1, z2, A2 = forward_prop(w1, b1, w2, b2, X)\n        dW1, db1, dW2, db2 = back_prop(z1, A1, z2, A2, w2, X, Y)\n        w1, b1, w2, b2, = update_params(w1, b1, w2, b2, dW1, db1, dW2, db2, alpha)\n        if i % 50 == 0:\n            print(\"Iteration: \", i)\n            print(\"Accuracy: \", get_accuracy(get_predictions(A2), Y))\n    return w1, b1, w2, b2","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-10T14:57:01.769809Z","iopub.execute_input":"2025-08-10T14:57:01.770533Z","iopub.status.idle":"2025-08-10T14:57:01.776704Z","shell.execute_reply.started":"2025-08-10T14:57:01.770506Z","shell.execute_reply":"2025-08-10T14:57:01.775801Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"w1, b1, w2, b2 = gradient_descent(X_train, Y_train, 500, 0.1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-10T14:57:02.846408Z","iopub.execute_input":"2025-08-10T14:57:02.846709Z","iopub.status.idle":"2025-08-10T14:59:01.695012Z","shell.execute_reply.started":"2025-08-10T14:57:02.846685Z","shell.execute_reply":"2025-08-10T14:59:01.694289Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}